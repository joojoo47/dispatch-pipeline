{
  "name": "Automated Volume Cleanup",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.fly.io/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $secrets.FLY_API_TOKEN || $env.FLY_API_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query { volumes { nodes { id name region sizeGb state createdAt attachedAllocation { id app { name } } } } }"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json",
              "dataProperty": "data.volumes.nodes"
            }
          }
        }
      },
      "name": "List Volumes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300],
      "notesInFlow": "Fetch all volumes from Fly.io apps using updated GraphQL schema"
    },
    {
      "parameters": {
        "functionCode": [
          "// Filter volumes that are unattached (orphaned)",
          "const orphanedVolumes = $input.all().filter(volume => !volume.json.attachedAllocation);",
          "// Return clean list of orphaned volumes",
          "return orphanedVolumes.map(volume => ({",
          "  json: {",
          "    volumeId: volume.json.id,",
          "    volumeName: volume.json.name,",
          "    region: volume.json.region,",
          "    sizeGb: volume.json.sizeGb,",
          "    state: volume.json.state,",
          "    createdAt: volume.json.createdAt,",
          "    appName: 'orphaned'",
          "  }",
          "}));"
        ]
      },
      "name": "Filter Orphaned Volumes",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [480, 300],
      "notesInFlow": "Filter volumes to find orphaned ones (no attachedAllocation)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.fly.io/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $secrets.FLY_API_TOKEN || $env.FLY_API_TOKEN || $credentials.flyApiToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "mutation { deleteVolume(input: { volumeId: \"{{$json.volumeId}}\" }) { volume { id } } }"
            }
          ]
        },
        "options": {}
      },
      "name": "Delete Orphaned Volumes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [720, 300],
      "notesInFlow": "Delete each orphaned volume using Fly.io GraphQL mutation"
    }
  ],
  "connections": {
    "List Volumes": {
      "main": [
        [
          {
            "node": "Filter Orphaned Volumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Orphaned Volumes": {
      "main": [
        [
          {
            "node": "Delete Orphaned Volumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null
}