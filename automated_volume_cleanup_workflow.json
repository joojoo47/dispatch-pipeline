{
  "name": "Automated Volume Cleanup",
  "nodes": [
    {
      "parameters": {},
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [0, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.fly.io/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $secrets.FLY_API_TOKEN || $env.FLY_API_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query { apps { nodes { id name volumes { nodes { id name region sizeGb state attachedAllocation { id app { name } } } } } } }"
            }
          ]
        },
        "options": {}
      },
      "name": "List Volumes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300],
      "notesInFlow": "Fetch all volumes from Fly.io apps using updated GraphQL schema"
    },
    {
      "parameters": {
        "functionCode": [
          "// Get all input items safely",
          "const items = $input.all();",
          "",
          "// Check if we have any input",
          "if (!items || items.length === 0) {",
          "  return [{ json: { error: 'No input received from previous node' } }];",
          "}",
          "",
          "// Get the first item",
          "const firstItem = items[0];",
          "if (!firstItem || !firstItem.json) {",
          "  return [{ json: { error: 'No JSON data in input' } }];",
          "}",
          "",
          "// Check API response structure",
          "const response = firstItem.json;",
          "if (!response || !response.data) {",
          "  return [{ json: { error: 'Invalid API response', details: response } }];",
          "}",
          "",
          "// Extract volumes safely",
          "let allVolumes = [];",
          "try {",
          "  if (response.data.apps && response.data.apps.nodes) {",
          "    allVolumes = response.data.apps.nodes",
          "      .filter(app => app && app.volumes && app.volumes.nodes)",
          "      .map(app => app.volumes.nodes)",
          "      .flat();",
          "  } else if (response.data.volumes && response.data.volumes.nodes) {",
          "    allVolumes = response.data.volumes.nodes;",
          "  }",
          "} catch (error) {",
          "  return [{ json: { error: 'Error processing volumes', details: error.message } }];",
          "}",
          "",
          "// Filter orphaned volumes",
          "const orphanedVolumes = allVolumes.filter(volume => volume && !volume.attachedAllocation);",
          "",
          "// Return results",
          "return orphanedVolumes.map(volume => ({",
          "  json: {",
          "    volumeId: volume.id,",
          "    volumeName: volume.name || 'unknown',",
          "    region: volume.region || 'unknown',",
          "    sizeGb: volume.sizeGb || 0,",
          "    state: volume.state || 'unknown',",
          "    appName: 'orphaned'",
          "  }",
          "}));"
        ]
      },
      "name": "Filter Orphaned Volumes",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [480, 300],
      "notesInFlow": "Filter volumes to find orphaned ones (no attachedAllocation)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.fly.io/graphql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $secrets.FLY_API_TOKEN || $env.FLY_API_TOKEN || $credentials.flyApiToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "mutation { deleteVolume(input: { volumeId: \"{{$json.volumeId}}\" }) { volume { id } } }"
            }
          ]
        },
        "options": {}
      },
      "name": "Delete Orphaned Volumes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [720, 300],
      "notesInFlow": "Delete each orphaned volume using Fly.io GraphQL mutation"
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "List Volumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Volumes": {
      "main": [
        [
          {
            "node": "Filter Orphaned Volumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Orphaned Volumes": {
      "main": [
        [
          {
            "node": "Delete Orphaned Volumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null
}